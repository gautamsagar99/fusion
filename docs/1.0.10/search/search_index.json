{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pyfusion","title":"PyFusion","text":"<p>PyFusion is the Python SDK for the Fusion platform API. </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pyfusion\n</code></pre> <p>Fusion by J.P. Morgan is a cloud-native data platform for institutional investors, providing end-to-end data management, analytics, and reporting solutions across the investment lifecycle. The platform allows clients to seamlessly integrate and combine data from multiple sources into a single data model that delivers the benefits and scale and reduces costs, along with the ability to more easily unlock timely analysis and insights. Fusion's open data architecture supports flexible distribution, including partnerships with cloud and data providers, all managed by J.P. Morgan data experts. </p> <p>For more information, please visit fusion.jpmorgan.com</p> <p>For the SDK documentation, please visit page</p>"},{"location":"api/","title":"Modules","text":"<p>Top-level package for fusion.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#1010-2023-03-23","title":"[1.0.10] - 2023-03-23","text":"<ul> <li>md5 to sha256 convention change</li> <li>fsync continuous updates bug fix</li> <li>to_table function addition</li> <li>saving files in a hive friendly folder structure</li> <li>new bearer token add for download/upload operations</li> <li>raw data upload functionality fix</li> </ul>"},{"location":"changelog/#109-2023-01-23","title":"[1.0.9] - 2023-01-23","text":"<ul> <li>operational enhancements</li> </ul>"},{"location":"changelog/#108-2023-01-19","title":"[1.0.8] - 2023-01-19","text":"<ul> <li>cloud storage compatibility</li> </ul>"},{"location":"changelog/#107-2023-01-12","title":"[1.0.7] - 2023-01-12","text":"<ul> <li>Multi-part upload</li> <li>fsync</li> </ul>"},{"location":"changelog/#106-2022-11-21","title":"[1.0.6] - 2022-11-21","text":"<ul> <li>Support setting of the default catalog</li> <li>Fusion filesystem module</li> <li>Upload functionality</li> <li>Folder traversing for credentials</li> <li>Filters for parquet and csv file opening</li> </ul>"},{"location":"changelog/#105-2022-06-22","title":"[1.0.5] - 2022-06-22","text":"<ul> <li>Add support for internal auth methods</li> </ul>"},{"location":"changelog/#104-2022-05-19","title":"[1.0.4] - 2022-05-19","text":"<ul> <li>Support proxy servers in auth post requests</li> <li>Add back support for '2020-01-01' and '20200101' date formats</li> <li>Various bug fixes</li> <li>Streamline credentials creation</li> </ul>"},{"location":"changelog/#103-2022-05-12","title":"[1.0.3] - 2022-05-12","text":"<ul> <li>Add support for 'latest' datasets</li> </ul>"},{"location":"changelog/#102-2022-05-12","title":"[1.0.2] - 2022-05-12","text":"<ul> <li>Integrate build with docs </li> </ul>"},{"location":"changelog/#101-2022-05-12","title":"[1.0.1] - 2022-05-12","text":"<ul> <li>First live release on JPMC gitub</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>{{ cookiecutter.project_name }} could always use more documentation, whether as part of the official {{ cookiecutter.project_name }} docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>{{ cookiecutter.project_slug }}</code> for local development.</p> <ol> <li>Fork the <code>{{ cookiecutter.project_slug }}</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/{{ cookiecutter.project_slug }}.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.7, 3.8 and 3.9. Check    https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ poetry run pytest tests/test_{{ cookiecutter.pkg_name }}.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"get_started/","title":"Fusion - get started","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom fusion import Fusion\n\nplt.style.use(\"bmh\")\n</pre> import pandas as pd import matplotlib.pyplot as plt from fusion import Fusion  plt.style.use(\"bmh\") In\u00a0[2]: Copied! <pre>fusion = Fusion()\n</pre> fusion = Fusion() In\u00a0[3]: Copied! <pre>fusion\n</pre> fusion Out[3]: <pre>Fusion object \nAvailable methods:\n+-------------------------+\n| catalog_resources       |\n| dataset_resources       |\n| datasetmember_resources |\n| download                |\n| get_fusion_filesystem   |\n| list_catalogs           |\n| list_dataset_attributes |\n| list_datasetmembers     |\n| list_datasets           |\n| list_distributions      |\n| list_products           |\n| to_df                   |\n| upload                  |\n| default_catalog         |\n+-------------------------+</pre> In\u00a0[4]: Copied! <pre>fusion.to_df?\n</pre> fusion.to_df? <pre>Signature:\nfusion.to_df(\n    dataset: str,\n    dt_str: str = 'latest',\n    dataset_format: str = 'parquet',\n    catalog: str = None,\n    n_par: int = None,\n    show_progress: bool = True,\n    columns: List = None,\n    filters: List = None,\n    force_download: bool = False,\n    download_folder: str = None,\n**kwargs,\n) -&gt; pandas.core.frame.DataFrame\nDocstring:\nGets distributions for a specified date or date range and returns the data as a dataframe.\n\nArgs:\n    dataset (str): A dataset identifier\n    dt_str (str, optional): Either a single date or a range identified by a start or end date,\n        or both separated with a \":\". Defaults to 'latest' which will return the most recent\n        instance of the dataset.\n    dataset_format (str, optional): The file format, e.g. CSV or Parquet. Defaults to 'parquet'.\n    catalog (str, optional): A catalog identifier. Defaults to 'common'.\n    n_par (int, optional): Specify how many distributions to download in parallel.\n        Defaults to all cpus available.\n    show_progress (bool, optional): Display a progress bar during data download Defaults to True.\n    columns (List, optional): A list of columns to return from a parquet file. Defaults to None\n    filters (List, optional): List[Tuple] or List[List[Tuple]] or None (default)\n        Rows which do not match the filter predicate will be removed from scanned data.\n        Partition keys embedded in a nested directory structure will be exploited to avoid\n        loading files at all if they contain no matching rows. If use_legacy_dataset is True,\n        filters can only reference partition keys and only a hive-style directory structure\n        is supported. When setting use_legacy_dataset to False, also within-file level filtering\n        and different partitioning schemes are supported.\n        More on https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetDataset.html\n    force_download (bool, optional): If True then will always download a file even\n        if it is already on disk. Defaults to False.\n    download_folder (str, optional): The path, absolute or relative, where downloaded files are saved.\n        Defaults to download_folder as set in __init__\nReturns:\n    class:`pandas.DataFrame`: a dataframe containing the requested data.\n        If multiple dataset instances are retrieved then these are concatenated first.\nFile:      d:\\dev\\fusion\\fusion\\fusion.py\nType:      method\n</pre> In\u00a0[5]: Copied! <pre>fusion.list_datasets(\"FX\")\n</pre> fusion.list_datasets(\"FX\") Out[5]: identifier title region category coverageStartDate coverageEndDate description 7 FX_EASIDX Economic Activity Surprise Index (EASI) FX EMEA, North America, APAC, Emerging Markets, G... Economics 2019-01-01 2023-01-04 The Economic Activity Surprise Index is publis... 15 FX_MEAN_IMM FX Mean Reversion Strategies IMM EMEA, North America, APAC, Emerging Markets, G... FX 2019-01-01 2023-01-04 The FX Mean Reversion, IMM dataset from J.P. M... 19 FXO_SP FX Cash Rate EMEA, North America, APAC, Emerging Markets, G... FX 2019-01-01 2023-01-04 This dataset includes FX spot rates for major ... 20 FXO_RR FX Option Structure | Risk Reversal EMEA, North America, APAC, Emerging Markets, G... FX 2019-01-01 2023-01-04 Implied volatility for 10 and 25 delta FX opti... 21 FXO_ST FX Option Structure | Strangles EMEA, North America, APAC, Emerging Markets, G... FX 2019-01-01 2023-01-04 Implied volatility for 10 and 25 delta FX opti... 34 FX-ECV-Post-Trade FX ECV Post-Trade Report Global FX NaN NaN FX ECV Post-Trade Report. 46 FX_ECONOMIC FX Specialized | Momentum Strategies (Economics) EMEA, North America, APAC, Emerging Markets, G... FX 2019-01-01 2023-01-04 Momentum signals in a trend following strategy... 63 FXO_IV FX Specialized | Option Implied Volatility EMEA, North America, APAC, Emerging Markets, G... FX 2019-01-01 2023-01-04 Global FX option implied volatility data for a... 74 FX_JPM_TCI FX Passive Index EMEA, North America, APAC, Global FX 2019-01-01 2023-01-04 FX passive index level and currency sub-indices. 75 FX_MEAN_HFFV FX Mean Reversion Strategies Hi Freq Fair Value EMEA, North America, APAC, Global FX 2019-01-01 2023-01-04 The FX High Frequency Fair Value dataset from ... In\u00a0[6]: Copied! <pre>fusion.list_dataset_attributes(\"FXO_SP\")\n</pre> fusion.list_dataset_attributes(\"FXO_SP\") Out[6]: identifier dataType isDatasetKey description 0 instrument_name String True The instrument name 1 currency_pair String False The currency pair 2 term String False The time period of an investment, agreement or... 3 product String False The product identifier 4 date String False The snapshot date 5 fx_rate Double False The spot and forward fx rate In\u00a0[7]: Copied! <pre>df = fusion.to_df(\"FXO_SP\", \"20220101:20221231\", columns=[\"currency_pair\", \"date\", \"fx_rate\"], filters=[(\"currency_pair\", \"=\", \"GBPUSD\")])\n</pre> df = fusion.to_df(\"FXO_SP\", \"20220101:20221231\", columns=[\"currency_pair\", \"date\", \"fx_rate\"], filters=[(\"currency_pair\", \"=\", \"GBPUSD\")]) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 258/258 [00:03&lt;00:00, 68.80it/s]\n</pre> In\u00a0[8]: Copied! <pre>df.head()\n</pre> df.head() Out[8]: currency_pair date fx_rate 0 GBPUSD 20220318 1.31705 1 GBPUSD 20220322 1.32590 2 GBPUSD 20220103 1.34475 3 GBPUSD 20220104 1.35530 4 GBPUSD 20220105 1.35660 In\u00a0[9]: Copied! <pre>df[\"date\"] = pd.to_datetime(df[\"date\"].astype(\"str\"))\ndf.sort_values(\"date\").set_index(\"date\").plot(grid=True);\n</pre> df[\"date\"] = pd.to_datetime(df[\"date\"].astype(\"str\")) df.sort_values(\"date\").set_index(\"date\").plot(grid=True);"},{"location":"get_started/#fusion-get-started","title":"Fusion - get started\u00b6","text":""},{"location":"get_started/#establish-the-connection","title":"Establish the connection\u00b6","text":""},{"location":"get_started/#show-the-available-functionality","title":"Show the available functionality\u00b6","text":""},{"location":"get_started/#access-function-documentation","title":"Access function documentation\u00b6","text":""},{"location":"get_started/#explore-the-datasets","title":"Explore the datasets\u00b6","text":""},{"location":"get_started/#display-the-attributes","title":"Display the attributes\u00b6","text":""},{"location":"get_started/#download-and-load","title":"Download and load\u00b6","text":""},{"location":"get_started/#analyze","title":"Analyze\u00b6","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install PyFusion, run this command in your terminal:</p> <pre><code>$ pip install pyfusion\n</code></pre> <p>This is the preferred method to install PyFusion, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for PyFusion can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/jpmorganchase/fusion\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/jpmorganchase/fusion/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#pyfusion","title":"PyFusion","text":"<p>PyFusion is the Python SDK for the Fusion platform API. </p>"},{"location":"usage/#installation","title":"Installation","text":"<pre><code>pip install pyfusion\n</code></pre>"}]}